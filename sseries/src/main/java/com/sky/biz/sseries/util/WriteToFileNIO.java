package com.sky.biz.sseries.util;

import java.io.BufferedOutputStream;
import java.io.BufferedWriter;
import java.io.File;
import java.io.IOException;
import java.io.OutputStream;
import java.io.UnsupportedEncodingException;
import java.nio.charset.Charset;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.List;

public class WriteToFileNIO {
	
	private static final String JAVA_MODULE_NAME = "";
	
	private static final String PROJECTFILEPATH = "D:\\SKY-SOFT\\github-repository\\sseries\\sseries\\src\\apartment\\com\\sky\\biz\\sseries";
	private static final String TARGETOBJECT = "RoomMeter";
	private static final String WEBTARGETOBJECT = "room-meter";
	private static final String MODULEPATH = "apm";
	
	private static final String CONTROLLERPATH =  PROJECTFILEPATH + "\\" + MODULEPATH + "\\" + "controller\\Abstract" + TARGETOBJECT + "Controller.java" ;
	private static final String CONVERTERPATH =  PROJECTFILEPATH + "\\" + MODULEPATH + "\\" + "converter\\" + TARGETOBJECT + "Converter.java" ;
	private static final String INTERFACESERVICEPATH = PROJECTFILEPATH + "\\" + MODULEPATH + "\\" + "services" + "\\I" + TARGETOBJECT + "Service.java" ;
	private static final String SERVICEPATH = PROJECTFILEPATH + "\\" + MODULEPATH + "\\" + "services" + "\\Abstract" + TARGETOBJECT + "Service.java" ;
	private static final String DTOPATH =  PROJECTFILEPATH + "\\" + MODULEPATH + "\\" + "dto\\" +  TARGETOBJECT + "DTO.java" ;
	private static final String ENTITYPATH =  PROJECTFILEPATH + "\\" + MODULEPATH + "\\" + "entity\\" +  TARGETOBJECT + "Entity.java" ;
	private static final String REPOSITORYPATH =  PROJECTFILEPATH + "\\" + MODULEPATH + "\\" + "repositories" + "\\" +  TARGETOBJECT + "Repository.java" ;
	private static final String SPECIFICATIONPATH = PROJECTFILEPATH + "\\" + MODULEPATH + "\\"  +"specification\\Abstract"+  TARGETOBJECT + "Specification.java" ;
	
	
	//###############################
	private static final String WEBAPPPATH = "D:\\SKY-SOFT\\github-repository\\sseries\\sseries\\src\\main\\webapp\\app\\" + MODULEPATH + "\\master-data";
	
	private static final String SCREENCENTERPATH = WEBAPPPATH + "\\" + WEBTARGETOBJECT + ".xhtml";
	private static final String SCREENLISTPATH = WEBAPPPATH + "\\" + WEBTARGETOBJECT + "-list.xhtml";
	private static final String SCREENCREATEPATH = WEBAPPPATH + "\\" + WEBTARGETOBJECT + "-create.xhtml";
	private static final String SCREENMODIFYPATH = WEBAPPPATH + "\\" + WEBTARGETOBJECT + "-edit.xhtml";
	private static final String SCREENVIEWPATH = WEBAPPPATH + "\\" + WEBTARGETOBJECT + "-view.xhtml";
		
	private static final String CONTROLLERFILEPATH = "D:\\SKY-SOFT\\github-repository\\sseries\\sseries\\src\\business-partner\\com\\sky\\biz\\sseries"
			+ "\\bpn\\specification" 
			+ "\\AbstractBusinessPartnerGroupSpecifications.java";
//	private static final String CONTROLLERFILEPATH = "D:\\SKY-SOFT\\github-repository\\sseries\\sseries\\src\\main\\webapp\\app\\bpn" 
//			+ "\\business-partner-group-list.xhtml";
	private static final String FILEPATH = "C:\\TestFiles\\UserAccountController.java";
	private static final String FILENAME = "ProductTypeConverter.java";

	public static void main(String[] args) throws IOException {

		//String str1 = "";
		//String str2 = "package com.sky.biz.sseries.bpn.specification;\n\nimport javax.persistence.criteria.CriteriaBuilder;\n\nimport java.util.Map;\n\nimport javax.persistence.criteria.*;\n\nimport org.springframework.data.jpa.domain.Specification;\nimport com.sky.biz.sseries.bpn.util.*;\nimport com.sky.biz.sseries.bpn.dto.*;\nimport com.sky.biz.sseries.bpn.entity.*;\n\nimport java.util.*;\nimport com.sky.biz.sseries.util.SpecificationsUtil;\npublic class AbstractBusinessPartnerGroupSpecifications{\n\tpublic static Specification<BusinessPartnerGroupEntity> basicCriteria(Map<String,Object> criteriaMap){\n\t\treturn new Specification<BusinessPartnerGroupEntity>() {\n\t\t\tpublic Predicate toPredicate(Root<BusinessPartnerGroupEntity> root,CriteriaQuery<?> query,CriteriaBuilder cb){\n\t\t\t\tBusinessPartnerGroupDTO dto = null;\n\t\t\t\tif(criteriaMap != null)\n\t\t\t\t\tdto = (BusinessPartnerGroupDTO)criteriaMap.get(SpecificationsUtil.DEFAULT_CRITERIA_KEY_MAP);\n\t\t\t\tif(dto!=null){\n\t\t\n\t\t\t\t\tif(SpecificationsUtil.isNotEmpty(dto.getDefaultGroup())){\n\t\t\t\t\t\tp1 = cb.and(cb.equal(root.get(\"default_group\"),dto.getDefaultGroup()),p1);\n\t\t\t\t\t}\n\t\t\n\t\t\t\t\tif(SpecificationsUtil.isNotEmpty(dto.getName())){\n\t\t\t\t\t\tp1 = cb.and(cb.like(root.get(\"name\"),SpecificationsUtil.getLikePattern(dto.getName(),SpecificationsUtil.LIKE_PATTERN_PARTIAL)),p1);\n\t\t\t\t\t}\n\t\t\n\t\t\t\t\tif(SpecificationsUtil.isNotEmpty(dto.getDescription())){\n\t\t\t\t\t\tp1 = cb.and(cb.like(root.get(\"description\"),SpecificationsUtil.getLikePattern(dto.getDescription(),SpecificationsUtil.LIKE_PATTERN_PARTIAL)),p1);\n\t\t\t\t\t}\n\t\t\n\t\t\t\t}\n\t\t\t\treturn p1;\n\t\t\t}\n\t\t};\n\t}\n}";		

//		String absController = "/**\n *\n */\npackage com.sky.biz.sseries.apm.controller;\nimport java.util.HashMap;\nimport java.util.Map;\nimport javax.annotation.PostConstruct;\nimport javax.faces.bean.ManagedProperty;\nimport javax.faces.event.ActionEvent;\nimport com.sky.biz.sseries.mbean.AbstractController;\nimport com.sky.biz.sseries.mbean.IBasicController;\nimport com.sky.biz.sseries.mbean.LazyDataModelUtil;\nimport com.sky.biz.sseries.apm.dto.*;\nimport com.sky.biz.sseries.apm.services.impl.*;\n\nimport com.sky.biz.sseries.util.JsfUtil;\n\nimport com.sky.biz.sseries.util.SpecificationsUtil;\nimport org.primefaces.event.SelectEvent;\npublic class AbstractRoomTypeController extends AbstractController implements IBasicController {\n\tprivate LazyDataModelUtil<RoomTypeDTO> lazyData;\n\t@ManagedProperty(value=\"#{roomTypeServiceImpl}\")\n\tprivate RoomTypeServiceImpl roomTypeServiceImpl;\n\tprivate RoomTypeDTO selectedRoomTypeDTO;\n\tprivate RoomTypeDTO mainRoomTypeDTO;\n\tprivate RoomTypeDTO criteriaRoomTypeDTO;\n\n\t@SuppressWarnings(\"unchecked\")\n\t@PostConstruct\n\tpublic void init() {\n\t\tthis.createView=\"app/apm/master-data/room-type-create\";\n\t\tthis.editView=\"app/apm/master-data/room-type-edit\";\n\t\tthis.listView=\"app/apm/master-data/room-type-list\";\n\t\tthis.readView=\"app/apm/master-data/room-type-view\";\n\t\tthis.selectedRoomTypeDTO = new RoomTypeDTO();\n\t\tthis.criteriaRoomTypeDTO = new RoomTypeDTO();\n\t\tthis.mainRoomTypeDTO = new RoomTypeDTO();\n\t\tthis.currentSubView = this.listView;\n\t\tlazyData = new LazyDataModelUtil<RoomTypeDTO>(roomTypeServiceImpl);\n\t}\n\n\tpublic void editAction(ActionEvent actionEvent){\n\t\ttry{\n\t\t\tif(this.selectedRoomTypeDTO == null || this.selectedRoomTypeDTO.getId() == null){\n\t\t\t\tJsfUtil.addWarningMessage(\"Please select at least one item\");\n\t\t\t}else{\n\t\t\t\tthis.mainRoomTypeDTO = this.selectedRoomTypeDTO;\n\t\t\t\tthis.setCurrentSubView(this.editView);\n\t\t\t}\n\t\t}catch(Exception ex){\n\t\t\tJsfUtil.addErrorMessage(ex, \"SSeries Error Please Contact admin\");\n\t\t\tex.printStackTrace();\n\t\t}\n\t}\n\n\tpublic void viewAction(ActionEvent actionEvent){\n\t\ttry{\n\t\t\tif(this.selectedRoomTypeDTO == null || this.selectedRoomTypeDTO.getId() == null){\n\t\t\t\tJsfUtil.addWarningMessage(\"Please select at least one item\");\n\t\t\t}else{\n\t\t\t\tthis.setCurrentSubView(this.readView);\n\t\t\t}\n\t\t}catch(Exception ex){\n\t\t\tJsfUtil.addErrorMessage(ex, \"SSeries Error Please Contact admin\");\n\t\t\tex.printStackTrace();\n\t\t}\n\t}\n\n\tpublic void newAction(ActionEvent actionEvent) {\n\t\ttry{\n\t\t\tthis.mainRoomTypeDTO = new RoomTypeDTO();\n\t\t\tthis.setCurrentSubView(this.createView);\n\t\t}catch(Exception ex){\n\t\t\tJsfUtil.addErrorMessage(ex, \"SSeries Error Please Contact admin\");\n\t\t\tex.printStackTrace();\n\t\t}\n\t}\n\n\tpublic void saveAction(ActionEvent actionEvent) {\n\t\ttry{\n\t\t\troomTypeServiceImpl.saveNew(this.mainRoomTypeDTO);\n\t\t\tthis.selectedRoomTypeDTO = this.mainRoomTypeDTO;\n\t\t\tthis.mainRoomTypeDTO = new RoomTypeDTO();\n\t\t\tthis.setCurrentSubView(this.readView);\n\t\t\tJsfUtil.addSuccessMessage(\" Room Type was created already!!\");\n\t\t}catch(Exception ex){\n\t\t\tJsfUtil.addErrorMessage(ex, \"SSeries Error Please Contact admin\");\n\t\t\tex.printStackTrace();\n\t\t}\n\t}\n\n\tpublic void updateAction(ActionEvent actionEvent) {\n\t\ttry{\n\t\t\troomTypeServiceImpl.update(this.mainRoomTypeDTO);\n\t\t\tthis.selectedRoomTypeDTO = this.mainRoomTypeDTO;\n\t\t\tthis.mainRoomTypeDTO = new RoomTypeDTO();\n\t\t\tthis.setCurrentSubView(this.readView);\n\t\t\tJsfUtil.addSuccessMessage(\" Room Type was updated already!!\");\n\t\t}catch(Exception ex){\n\t\t\tJsfUtil.addErrorMessage(ex, \"SSeries Error Please Contact admin\");\n\t\t\tex.printStackTrace();\n\t\t}\n\t}\n\n\tpublic void deleteAction(ActionEvent actionEvent) {\n\t\ttry{\n\t\t\troomTypeServiceImpl.delete(this.selectedRoomTypeDTO);\n\t\t\tthis.selectedRoomTypeDTO = this.mainRoomTypeDTO;\n\t\t\tthis.mainRoomTypeDTO = new RoomTypeDTO();\n\t\t\tthis.setCurrentSubView(this.listView);\n\t\t\tJsfUtil.addSuccessMessage(\" Room Type was deleted already!!\");\n\t\t}catch(Exception ex){\n\t\t\tJsfUtil.addErrorMessage(ex, \"SSeries Error Please Contact admin\");\n\t\t\tex.printStackTrace();\n\t\t}\n\t}\n\n\tpublic void searchAction(ActionEvent actionEvent){\n\t\ttry{\n\t\t\tMap<String, Object> map = new HashMap<String, Object>();\n\t\t\tmap.put(SpecificationsUtil.DEFAULT_CRITERIA_KEY_MAP,this.criteriaRoomTypeDTO);\n\t\t\tthis.lazyData.setCriteriaMap(map);\n\t\t}catch(Exception ex){\n\t\t\tJsfUtil.addErrorMessage(ex, \"SSeries Error Please Contact admin\");\n\t\t\tex.printStackTrace();\n\t\t}\n\t}\n\n\tpublic void resetAction(ActionEvent actionEvent){\n\t\tthis.criteriaRoomTypeDTO = new RoomTypeDTO();\n\t\tthis.lazyData.setCriteriaMap(null);\n\n\t}\n\n\tpublic void setDeleteAction(RoomTypeDTO roomType){\n\t\ttry{\n\t\t\tthis.selectedRoomTypeDTO = roomType;\n\t\t\tif(this.selectedRoomTypeDTO == null || this.selectedRoomTypeDTO.getId() == null){\n\t\t\t\tJsfUtil.addWarningMessage(\"Please select at least one item\");\n\t\t\t}else{\n\t\t\t\troomTypeServiceImpl.delete(this.selectedRoomTypeDTO);\n\t\t\t\tthis.selectedRoomTypeDTO = this.mainRoomTypeDTO;\n\t\t\t\tthis.mainRoomTypeDTO = new RoomTypeDTO();\n\t\t\t\tthis.setCurrentSubView(this.listView);\n\t\t\t\tJsfUtil.addSuccessMessage(\" Room Type was deleted already!!\");\n\t\t\t}\n\t\t}catch(Exception ex){\n\t\t\tJsfUtil.addErrorMessage(ex, \"SSeries Error Please Contact admin\");\n\t\t\tex.printStackTrace();\n\t\t}\n\n\t}\n\n\tpublic void setViewAction(RoomTypeDTO roomType){\n\t\tthis.selectedRoomTypeDTO = roomType;\n\t\tthis.setCurrentSubView(this.readView);\n\n\t}\n\n\tpublic void onRowSelect(SelectEvent event) {\n\t\tthis.selectedRoomTypeDTO = (RoomTypeDTO) event.getObject();\n\t}\n\n\tpublic RoomTypeServiceImpl getRoomTypeServiceImpl() {\n\t\t\treturn roomTypeServiceImpl;\n\t}\n\n\tpublic void setRoomTypeServiceImpl(RoomTypeServiceImpl roomTypeServiceImpl) {\n\n\t\tthis.roomTypeServiceImpl = roomTypeServiceImpl;\n\n\t}\n\n\tpublic LazyDataModelUtil<RoomTypeDTO> getLazyData() {\n\n\t\treturn lazyData;\n\n\t}\n\n\tpublic void setLazyData(LazyDataModelUtil<RoomTypeDTO> lazyData) {\n\n\t\tthis.lazyData = lazyData;\n\n\t}\n\n\tpublic RoomTypeDTO getSelectedRoomTypeDTO() {\n\n\t\treturn selectedRoomTypeDTO;\n\n\t}\n\n\tpublic void setSelectedRoomTypeDTO(RoomTypeDTO selectedRoomTypeDTO) {\n\n\t\tthis.selectedRoomTypeDTO = selectedRoomTypeDTO;\n\n\t}\n\n\tpublic RoomTypeDTO getMainRoomTypeDTO() {\n\n\t\treturn mainRoomTypeDTO;\n\n\t}\n\n\tpublic void setMainRoomTypeDTO(RoomTypeDTO mainRoomTypeDTO) {\n\n\t\tthis.mainRoomTypeDTO = mainRoomTypeDTO;\n\n\t}\n\n\tpublic RoomTypeDTO getCriteriaRoomTypeDTO() {\n\n\t\treturn criteriaRoomTypeDTO;\n\n\t}\n\n\tpublic void setCriteriaRoomTypeDTO(RoomTypeDTO criteriaRoomTypeDTO) {\n\n\t\tthis.criteriaRoomTypeDTO = criteriaRoomTypeDTO;\n\n\t}\n}";
//		String converter = "package com.sky.biz.sseries.apm.converter;\n\nimport javax.faces.application.FacesMessage;\nimport javax.faces.component.UIComponent;\nimport javax.faces.context.FacesContext;\nimport javax.faces.convert.Converter;\nimport javax.faces.convert.ConverterException;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Component;\nimport com.sky.biz.sseries.apm.dto.RoomTypeDTO;\nimport com.sky.biz.sseries.apm.services.impl.RoomTypeServiceImpl;\n@Component(\"roomTypeConverter\")\npublic class RoomTypeConverter implements Converter {\n\t @Autowired\n\t private RoomTypeServiceImpl roomTypeServiceImpl;\n\n\t@Override\n\tpublic Object getAsObject(FacesContext fc, UIComponent uic, String value) {\n\t\tif(value != null && value.trim().length() > 0) {\n\t\t\ttry {\n\t\t\t\treturn roomTypeServiceImpl.loadById(Long.parseLong(value));\n\t\t\t} catch(NumberFormatException e) {\n\t\t\t\tthrow new ConverterException(new FacesMessage(FacesMessage.SEVERITY_ERROR, \"Conversion Error\", \"Not a valid Id for Converter.\"));\n\t\t\t}\n\t\t}\n\t\telse {return null;}\n\t}\n\n\t@Override\n\tpublic String getAsString(FacesContext fc, UIComponent uic, Object object ) {\n\t\tif(object != null && object.toString().trim().length() > 0) {\n\t\t\tString val = String.valueOf(((RoomTypeDTO) object).getId());\n\t\t\treturn val;\n\t\t}\n\t\telse {return null;}\n\t}\n }";
//		String dto = "/**\n *\n */\npackage com.sky.biz.sseries.apm.dto;\nimport java.util.Calendar;\n\nimport com.sky.biz.sseries.dto.AbstractDTO; \n@SuppressWarnings(\"serial\")\npublic class RoomTypeDTO extends AbstractDTO {\n\n\t\n\tpublic Boolean isActive;\n\t\n\tpublic String code;\n\t\n\tpublic String name;\n\t\n\tpublic String description;\n\n\n\tpublic Boolean getIsActive() {\n\t\treturn this.isActive;\n\t}\n\tpublic void setIsActive(Boolean isActive) { \n\t\tthis.isActive = isActive;\n\t}\n\t\n\tpublic String getCode() {\n\t\treturn this.code;\n\t}\n\tpublic void setCode(String code) { \n\t\tthis.code = code;\n\t}\n\t\n\tpublic String getName() {\n\t\treturn this.name;\n\t}\n\tpublic void setName(String name) { \n\t\tthis.name = name;\n\t}\n\t\n\tpublic String getDescription() {\n\t\treturn this.description;\n\t}\n\tpublic void setDescription(String description) { \n\t\tthis.description = description;\n\t}\n\n}";
//		String entity = "/**\n *\n */\npackage com.sky.biz.sseries.apm.entity;\n\nimport javax.persistence.Column;\nimport javax.persistence.JoinColumn;\nimport javax.persistence.ManyToOne;\nimport javax.persistence.Entity;\nimport javax.persistence.GeneratedValue;\nimport javax.persistence.GenerationType;\nimport javax.persistence.Id;\nimport javax.persistence.Inheritance;\nimport javax.persistence.InheritanceType;\nimport javax.persistence.SequenceGenerator;\nimport javax.persistence.Table;\nimport java.util.Calendar;\nimport javax.persistence.Temporal;\nimport javax.persistence.TemporalType;\nimport com.sky.biz.sseries.entity.AbstractEntity; \n@Inheritance(strategy = InheritanceType.TABLE_PER_CLASS)\n@Table(name = \"apm_room_type\")\n@SequenceGenerator(name = \"seq_apm_room_type\", sequenceName = \"seq_apm_room_type\")\n@Entity\npublic class RoomTypeEntity extends AbstractEntity {\n\t@Column(name = \"is_active\")\n\tprivate Boolean isActive;\n\t@Column(name = \"code\")\n\tprivate String code;\n\t@Column(name = \"name\")\n\tprivate String name;\n\t@Column(name = \"description\")\n\tprivate String description;\n\t@Id \n\t@Column(name = \"id\") \n\t@GeneratedValue(strategy = GenerationType.SEQUENCE)\n\tprivate Long id;\n\tpublic Boolean getIsActive() {\n\t\treturn this.isActive;\n\t}\n\tpublic void setIsActive(Boolean isActive) { \n\t\tthis.isActive = isActive;\n\t}\n\t\n\tpublic String getCode() {\n\t\treturn this.code;\n\t}\n\tpublic void setCode(String code) { \n\t\tthis.code = code;\n\t}\n\t\n\tpublic String getName() {\n\t\treturn this.name;\n\t}\n\tpublic void setName(String name) { \n\t\tthis.name = name;\n\t}\n\t\n\tpublic String getDescription() {\n\t\treturn this.description;\n\t}\n\tpublic void setDescription(String description) { \n\t\tthis.description = description;\n\t}\n\t\n\tpublic Long getId() {\n\t\treturn this.id;\n\t}\n\tpublic void setId(Long id) { \n\t\tthis.id = id;\n\t}\n}";
//		String repository = "package com.sky.biz.sseries.apm.repositories;\n\nimport org.springframework.data.domain.Page;\nimport org.springframework.data.domain.Pageable;\nimport org.springframework.data.jpa.repository.JpaSpecificationExecutor;\nimport org.springframework.data.repository.PagingAndSortingRepository;\nimport com.sky.biz.sseries.apm.entity.RoomTypeEntity;\nimport java.util.List;\n\npublic interface RoomTypeRepository extends PagingAndSortingRepository<RoomTypeEntity, Long>,JpaSpecificationExecutor<RoomTypeEntity>{\n\n\tpublic Page<RoomTypeEntity> findByCompCode(String compCode,Pageable pageRequest);\n\tpublic RoomTypeEntity findByCompCodeAndIdAndMarkDelete(String compCode,Long id,boolean markDelete);\n\tpublic List<RoomTypeEntity> findByCompCodeAndIsActiveAndMarkDelete(String compCode,boolean isActive,boolean markDelete);\n}";
//		String service = "package com.sky.biz.sseries.apm.services;\nimport org.springframework.data.domain.Page;\nimport org.springframework.data.domain.Pageable;\nimport com.sky.biz.sseries.services.*;\nimport com.sky.biz.sseries.util.*;\nimport com.sky.biz.sseries.apm.dto.*;\nimport com.sky.biz.sseries.apm.entity.*;\nimport com.sky.biz.sseries.apm.specification.*;\n\nimport java.util.*;\npublic class AbstractRoomTypeService extends ApmService implements IRoomTypeService{\n\n\t@Override\n\tpublic RoomTypeDTO loadById(Long id){\n\t\treturn buildRoomTypeDTO(roomTypeRepository.findOne(id));\n\t}\n\t@Override\n\t@SuppressWarnings({\"rawtypes\", \"unchecked\"})\n\tpublic PageDTOUtil<RoomTypeDTO> loadData(int first, int pageSize, Map criteriaMap){\n\t\tList<RoomTypeDTO> dtoList = new ArrayList<RoomTypeDTO>();\n\t\tPageable pageRequest = SpringDataUtil.createPageRequest(first,pageSize);\n\t\tPage<RoomTypeEntity> entityPage =  roomTypeRepository.findAll(RoomTypeSpecification.basicCriteria(criteriaMap),pageRequest);\n\t\tdtoList =  AbstractRoomTypeService.buildRoomTypeDTO(entityPage.getContent());\n\t\tPageDTOUtil<RoomTypeDTO> pageDTO = new PageDTOUtil<RoomTypeDTO>(entityPage.getTotalPages(),entityPage.getTotalElements(),dtoList);\n\t\treturn pageDTO;\n\t}\n\t@Override\n\tpublic PageDTOUtil<RoomTypeDTO> loadData(int first, int pageSize){\n\t\treturn this.loadData(first,pageSize,null);\n\t}\n\tpublic RoomTypeDTO saveNew(RoomTypeDTO dto) throws Exception{\n\t\tRoomTypeEntity entity = this.buildRoomTypeEntity(dto);\n\t\tentity.setCreatedBy(-9999L);\n\t\tentity.setCreatedDate(Calendar.getInstance());\n\t\tentity.setVersion(0);\n\t\tentity.setCompCode(\"FCNF\");\n\t\tentity =  roomTypeRepository.save(entity);\n\t\treturn buildRoomTypeDTO(entity);\n\t}\n\tpublic RoomTypeDTO update(RoomTypeDTO dto) throws Exception{\n\t\tRoomTypeEntity entity = this.buildRoomTypeEntity(dto);\n\t\tentity.setId(dto.getId());\n\t\tentity.setUpdatedBy(-9999L);\n\t\tentity.setCompCode(\"FCNF\");\n\t\tentity.setUpdatedDate(Calendar.getInstance());\n\t\tentity =  roomTypeRepository.save(entity);\n\t\treturn buildRoomTypeDTO(entity);\n\t}\n\tpublic void delete(RoomTypeDTO dto) throws Exception{\n\t\tRoomTypeEntity entity = roomTypeRepository.findByCompCodeAndIdAndMarkDelete(\"FCNF\",dto.getId(),false);\n\t\tentity.setMarkDelete(true);\n\t\troomTypeRepository.save(entity);\n\t\tdto = buildRoomTypeDTO(entity);\n\t}\n\tpublic List<RoomTypeDTO> loadActiveRoomType(){\n\t\tList <RoomTypeDTO>resultList = new ArrayList<RoomTypeDTO>();\n\t\tList<RoomTypeEntity> listEntity =  roomTypeRepository.findByCompCodeAndIsActiveAndMarkDelete(\"FCNF\",true,false);\n\t\tresultList = buildRoomTypeDTO(listEntity);\n\t\treturn resultList;\n\t}\n\tpublic static RoomTypeDTO buildRoomTypeDTO(RoomTypeEntity entity){\n\t\tif(entity == null)\n\t\t\treturn null;\n\t\tRoomTypeDTO dto = null;\n\t\tdto = new RoomTypeDTO();\n\t\tdto.setIsActive(entity.getIsActive());\n\t\tdto.setCode(entity.getCode());\n\t\tdto.setName(entity.getName());\n\t\tdto.setDescription(entity.getDescription());\n\t\tdto.setId(entity.getId());\n\t\tEntityDtoUtil.getAbstractDTO(entity,dto);\n\t\treturn dto;\n\t}\n\tpublic static List<RoomTypeDTO> buildRoomTypeDTO(List<RoomTypeEntity> entities){\n\t\tList<RoomTypeDTO> listReturn = new ArrayList<RoomTypeDTO>();\n\t\tIterator<RoomTypeEntity> iterator = entities.iterator();\n\t\twhile(iterator.hasNext()){\n\t\t\tlistReturn.add(buildRoomTypeDTO((RoomTypeEntity)iterator.next()));\n\t\t}\n\t\treturn listReturn;\n\t\t}\n\tpublic List<RoomTypeEntity> buildRoomTypeEntity(List<RoomTypeDTO> dtoList){ \n\t\tList<RoomTypeEntity> listReturn = new ArrayList<RoomTypeEntity>();\n\t\tIterator<RoomTypeDTO> iterator = dtoList.iterator();\n\t\twhile(iterator.hasNext()){\n\t\t\tlistReturn.add(buildRoomTypeEntity((RoomTypeDTO)iterator.next()));\n\t\t}\n\t\treturn listReturn;\n\t}\n\tpublic RoomTypeEntity buildRoomTypeEntity(RoomTypeDTO dto) {\n\t\tRoomTypeEntity entity = (RoomTypeEntity)DtoEntityUtil.initEntity(new RoomTypeEntity());\n\t\tentity.setIsActive(dto.getIsActive());\n\t\tentity.setCode(dto.getCode());\n\t\tentity.setName(dto.getName());\n\t\tentity.setDescription(dto.getDescription());\n\t\t\n\t\treturn entity;\n\t}\n}";
//		String serviceInterface = "package com.sky.biz.sseries.apm.services;\nimport com.sky.biz.sseries.apm.dto.RoomTypeDTO;\nimport com.sky.biz.sseries.apm.entity.RoomTypeEntity;\nimport com.sky.biz.sseries.services.ISSeriesServices;\n\nimport java.util.List;\n@SuppressWarnings(\"rawtypes\")\npublic interface IRoomTypeService extends ISSeriesServices {\n\n\tpublic RoomTypeDTO saveNew(RoomTypeDTO dto) throws Exception;\n\tpublic RoomTypeDTO update(RoomTypeDTO dto) throws Exception;\n\tpublic void delete(RoomTypeDTO dto) throws Exception;\n\tpublic List<RoomTypeDTO> loadActiveRoomType();\n\tpublic static RoomTypeDTO buildRoomTypeDTO(RoomTypeEntity entity) {return null;}\n\tpublic static List<RoomTypeDTO> buildRoomTypeDTO(List<RoomTypeEntity> entities){return null;}\n\tpublic List<RoomTypeEntity> buildRoomTypeEntity(List<RoomTypeDTO> dtoList);\n\tpublic RoomTypeEntity buildRoomTypeEntity(RoomTypeDTO dto);\n\t}";
//		String specification = "package com.sky.biz.sseries.apm.specification;\n\nimport javax.persistence.criteria.CriteriaBuilder;\n\nimport java.util.Map;\n\nimport javax.persistence.criteria.*;\n\nimport org.springframework.data.jpa.domain.Specification;\nimport com.sky.biz.sseries.apm.dto.*;\nimport com.sky.biz.sseries.apm.entity.*;\n\nimport java.util.*;\nimport com.sky.biz.sseries.util.SpecificationsUtil;\npublic class AbstractRoomTypeSpecification{\n\tpublic static Specification<RoomTypeEntity> basicCriteria(Map<String,Object> criteriaMap){\n\t\treturn new Specification<RoomTypeEntity>() {\n\t\t\tpublic Predicate toPredicate(Root<RoomTypeEntity> root,CriteriaQuery<?> query,CriteriaBuilder cb){\n\t\t\t\tRoomTypeDTO dto = null;\n\t\t\t\tPredicate p1 = cb.equal(root.get(\"markDelete\"), false);\n\t\t\t\tif(criteriaMap != null)\n\t\t\t\t\tdto = (RoomTypeDTO)criteriaMap.get(SpecificationsUtil.DEFAULT_CRITERIA_KEY_MAP);\n\t\t\t\tif(dto!=null){\n\t\t\n\t\t\t\t\tif(SpecificationsUtil.isNotEmpty(dto.getIsActive())){\n\t\t\t\t\t\tp1 = cb.and(cb.equal(root.get(\"isActive\"),dto.getIsActive()),p1);\n\t\t\t\t\t}\n\t\t\n\t\t\t\t\tif(SpecificationsUtil.isNotEmpty(dto.getCode())){\n\t\t\t\t\t\tp1 = cb.and(cb.like(root.get(\"code\"),SpecificationsUtil.getLikePattern(dto.getCode(),SpecificationsUtil.LIKE_PATTERN_PARTIAL)),p1);\n\t\t\t\t\t}\n\t\t\n\t\t\t\t\tif(SpecificationsUtil.isNotEmpty(dto.getName())){\n\t\t\t\t\t\tp1 = cb.and(cb.like(root.get(\"name\"),SpecificationsUtil.getLikePattern(dto.getName(),SpecificationsUtil.LIKE_PATTERN_PARTIAL)),p1);\n\t\t\t\t\t}\n\t\t\n\t\t\t\t\tif(SpecificationsUtil.isNotEmpty(dto.getDescription())){\n\t\t\t\t\t\tp1 = cb.and(cb.like(root.get(\"description\"),SpecificationsUtil.getLikePattern(dto.getDescription(),SpecificationsUtil.LIKE_PATTERN_PARTIAL)),p1);\n\t\t\t\t\t}\n\t\t\n\t\t\t\t}\n\t\t\t\treturn p1;\n\t\t\t}\n\t\t};\n\t}\n}";
//		String webCenter = "<ui:composition xmlns=\"http://www.w3.org/1999/xhtml\"\n xmlns:ui=\"http://java.sun.com/jsf/facelets\"\n xmlns:h=\"http://java.sun.com/jsf/html\"\n xmlns:f=\"http://java.sun.com/jsf/core\"\n xmlns:p=\"http://primefaces.org/ui\">\n\t<h:form>\n\t\t<input type=\"hidden\" name=\"${_csrf.parameterName}\" value=\"${_csrf.token}\"/>\n\t\t<p:ribbon>\n\t\t\t<p:tab title=\" Room Type\">\n\t\t\t\t<p:ribbonGroup label=\"New\">\n\t\t\t\t\t<p:commandButton value=\"New\" icon=\"ui-ribbonicon-new\" update=\":centerContentPanel\" styleClass=\"ui-ribbon-bigbutton\" disabled=\"#{roomTypeController.disabledNewEvent}\" actionListener=\"#{roomTypeController.newAction}\" />\n\t\t\t\t\t<p:commandButton value=\"Save\" icon=\"ui-ribbonicon-save\"  update=\":centerContentPanel\"  styleClass=\"ui-ribbon-bigbutton\" disabled=\"#{roomTypeController.disabledSaveEvent}\" actionListener=\"#{roomTypeController.saveAction}\"/>\n\t\t\t\t</p:ribbonGroup>\n\t\t\t<p:ribbonGroup label = \"Find\">\n\t\t\t\t\t<p:commandButton value=\"Finding\" icon=\"ui-ribbonicon-find\" update=\":centerContentPanel\" styleClass=\"ui-ribbon-bigbutton\" disabled=\"#{roomTypeController.disabledFindEvent}\" actionListener=\"#{roomTypeController.findAction}\" />\n\t\t\t\t\t<p:commandButton value=\"View\" icon=\"ui-ribbonicon-find\" update=\":centerContentPanel\" styleClass=\"ui-ribbon-bigbutton\" disabled=\"#{roomTypeController.disabledFindEvent}\" actionListener=\"#{roomTypeController.viewAction}\" />\n\t\t\t\t</p:ribbonGroup>\n\t\t\t\t<p:ribbonGroup label=\"Editing\">\n\t\t\t\t\t<p:commandButton value=\"Modify\" icon=\"ui-ribbonicon-save\"  update=\":centerContentPanel\"  styleClass=\"ui-ribbon-bigbutton\" disabled=\"#{roomTypeController.disabledEditEvent}\" actionListener=\"#{roomTypeController.editAction}\"/> \n\t\t\t\t</p:ribbonGroup>\n\t\t\t\t<p:ribbonGroup label=\"Export\">\n\t\t\t\t</p:ribbonGroup>\n\t\t\t</p:tab>\n\t\t\t</p:ribbon>\n\t\t\t</h:form>\n\t\t\t<br/>\n\t\t\t<ui:include src=\"/#{roomTypeController.currentSubView}.xhtml\" />\n</ui:composition>";
//		String webCreate = "<ui:composition xmlns=\"http://www.w3.org/1999/xhtml\"\n xmlns:ui=\"http://java.sun.com/jsf/facelets\"\n xmlns:h=\"http://java.sun.com/jsf/html\"\n xmlns:f=\"http://java.sun.com/jsf/core\"\n xmlns:p=\"http://primefaces.org/ui\">\n\t<div class=\"ui-fluid\">\n\t<h:form id=\"RoomTypeModifyForm\">\n\t\t<input type=\"hidden\" name=\"${_csrf.parameterName}\" value=\"${_csrf.token}\" />\n\t\t<p:panel header=\" Room Type\">\n\t\t\t<p:growl id=\"growl\" life=\"10000\" />\n\t\t\t<p:panelGrid columns=\"3\" columnClasses=\"ui-grid-col-3,ui-grid-col-10\" layout=\"grid\" styleClass=\"ui-panelgrid-blank\">\n\t\n\t\t\t\t<p:outputLabel value=\"Is Active: \" for=\"isActive\"/>\n\t\t\t\t<p:selectBooleanCheckbox id=\"isActive\" value=\"#{roomTypeController.mainRoomTypeDTO.isActive}\"/>\n\t\t\t\t<p:message for=\"isActive\"/>\n\t\t\t\t<p:outputLabel value=\"Code:\" for=\"code\"/>\n\t\t\t\t<p:inputText id=\"code\" value=\"#{roomTypeController.mainRoomTypeDTO.code}\"/>\n\t\t\t\t<p:message for=\"code\" />\n\t\t\t\t<p:outputLabel value=\"Name:\" for=\"name\"/>\n\t\t\t\t<p:inputText id=\"name\" value=\"#{roomTypeController.mainRoomTypeDTO.name}\"/>\n\t\t\t\t<p:message for=\"name\" />\n\t\t\t\t<p:outputLabel value=\"Description:\" for=\"description\"/>\n\t\t\t\t<p:inputText id=\"description\" value=\"#{roomTypeController.mainRoomTypeDTO.description}\"/>\n\t\t\t\t<p:message for=\"description\" />\n\t\t\t</p:panelGrid>\n\t\t\t<div align=\"center\">\n\t\t\t\t<p:commandButton value=\"Save\" id=\"ajax\" update=\":centerContentPanel\" disabled=\"#{roomTypeController.disabledSaveEvent}\" actionListener=\"#{roomTypeController.saveAction}\" styleClass=\"ui-priority-primary\" style=\"width: 20%\" icon=\"ui-icon-disk\"/>\n\t\t\t\t<p:commandButton value=\"Save-Continue\" id=\"ajax2\" update=\"growl\" disabled=\"#{roomTypeController.disabledSaveEvent}\" actionListener=\"#{roomTypeController.saveAction2}\" styleClass=\"ui-priority-primary\" style=\"width: 20%\" icon=\"ui-icon-disk\"/>\n\t\t\t</div>\n\t\t</p:panel>\n\t</h:form>\n\t</div>\n</ui:composition>";
//		String webEdit = "<ui:composition xmlns=\"http://www.w3.org/1999/xhtml\"\n xmlns:ui=\"http://java.sun.com/jsf/facelets\"\n xmlns:h=\"http://java.sun.com/jsf/html\"\n xmlns:f=\"http://java.sun.com/jsf/core\"\n xmlns:p=\"http://primefaces.org/ui\">\n\t<div class=\"ui-fluid\">\n\t<h:form id=\"RoomTypeModifyForm\">\n\t\t<input type=\"hidden\" name=\"${_csrf.parameterName}\" value=\"${_csrf.token}\" />\n\t\t<p:panel header=\" Room Type\">\n\t\t\t<p:growl id=\"growl\" life=\"10000\" />\n\t\t\t<p:panelGrid columns=\"3\" columnClasses=\"ui-grid-col-3,ui-grid-col-10\" layout=\"grid\" styleClass=\"ui-panelgrid-blank\">\n\t\n\t\t\t\t<p:outputLabel value=\"Is Active: \" for=\"isActive\"/>\n\t\t\t\t<p:selectBooleanCheckbox id=\"isActive\" value=\"#{roomTypeController.mainRoomTypeDTO.isActive}\"/>\n\t\t\t\t<p:message for=\"isActive\"/>\n\t\t\t\t<p:outputLabel value=\"Code:\" for=\"code\"/>\n\t\t\t\t<p:inputText id=\"code\" value=\"#{roomTypeController.mainRoomTypeDTO.code}\"/>\n\t\t\t\t<p:message for=\"code\" />\n\t\t\t\t<p:outputLabel value=\"Name:\" for=\"name\"/>\n\t\t\t\t<p:inputText id=\"name\" value=\"#{roomTypeController.mainRoomTypeDTO.name}\"/>\n\t\t\t\t<p:message for=\"name\" />\n\t\t\t\t<p:outputLabel value=\"Description:\" for=\"description\"/>\n\t\t\t\t<p:inputText id=\"description\" value=\"#{roomTypeController.mainRoomTypeDTO.description}\"/>\n\t\t\t\t<p:message for=\"description\" />\n\t\t\t</p:panelGrid>\n\t\t\t<div align=\"center\">\n\t\t\t\t<p:commandButton value=\"Update\" id=\"updateCommandButton\" update=\":centerContentPanel\" disabled=\"#{roomTypeController.disabledSaveEvent}\" actionListener=\"#{roomTypeController.updateAction}\" styleClass=\"ui-priority-primary\" style=\"width: 20%\" icon=\"ui-icon-disk\"/>\n\t\t\t</div>\n\t\t</p:panel>\n\t</h:form>\n\t</div>\n</ui:composition>";
//		String webList = "<ui:composition xmlns=\"http://www.w3.org/1999/xhtml\"\n xmlns:ui=\"http://java.sun.com/jsf/facelets\"\n xmlns:h=\"http://java.sun.com/jsf/html\"\n xmlns:f=\"http://java.sun.com/jsf/core\"\n xmlns:p=\"http://primefaces.org/ui\">\n\t<div class=\"ui-fluid\">\n\t<h:form id=\"RoomTypeCriteriaForm\">\n\t\t<p:growl id=\"growl\" life=\"10000\" />\n\t\t<input type=\"hidden\" name=\"${_csrf.parameterName}\" value=\"${_csrf.token}\" /> \n\t\t<p:panel header=\" Room Type\" toggleable=\"true\" toggleSpeed=\"500\" closeSpeed=\"500\" >\n\t\t\t<p:panelGrid columns=\"3\" columnClasses=\"ui-grid-col-3,ui-grid-col-10\" layout=\"grid\" styleClass=\"ui-panelgrid-blank\">\n\t\n\t\t\t\t<p:outputLabel value=\"Is Active: \" for=\"isActive\"/>\n\t\t\t\t<p:selectOneButton id=\"isActive\" value=\"#{roomTypeController.criteriaRoomTypeDTO.isActive}\"> \n\t\t\t\t\t<f:selectItem itemLabel=\"ALL\" itemValue=\"#{null}\" /> \n\t\t\t\t\t<f:selectItem itemLabel=\"Yes\" itemValue=\"#{true}\" />\n\t\t\t\t\t<f:selectItem itemLabel=\"No\" itemValue=\"#{false}\" />  \n\t\t\t\t</p:selectOneButton>\n\t\t\t\t<p:message for=\"isActive\" />\n\t\t\t\t<p:outputLabel value=\"Code:\" for=\"code\"/>\n\t\t\t\t<p:inputText id=\"code\" value=\"#{roomTypeController.criteriaRoomTypeDTO.code}\"/>\n\t\t\t\t<p:message for=\"code\" />\n\t\t\t\t<p:outputLabel value=\"Name:\" for=\"name\"/>\n\t\t\t\t<p:inputText id=\"name\" value=\"#{roomTypeController.criteriaRoomTypeDTO.name}\"/>\n\t\t\t\t<p:message for=\"name\" />\n\t\t\t\t<p:outputLabel value=\"Description:\" for=\"description\"/>\n\t\t\t\t<p:inputText id=\"description\" value=\"#{roomTypeController.criteriaRoomTypeDTO.description}\"/>\n\t\t\t\t<p:message for=\"description\" />\n\t\t\t</p:panelGrid>\n\t\t\t<div align=\"center\">\n\t\t\t\t<p:commandButton value=\"Search\" id=\"searchButton\" update=\":centerContentPanel\" actionListener=\"#{roomTypeController.searchAction}\" styleClass=\"ui-priority-primary\" style=\"width: 20%\" icon=\"ui-icon-disk\" />\n\t\t\t\t<p:commandButton value=\"Reset\" id=\"resetButton\" update=\":centerContentPanel\" actionListener=\"#{roomTypeController.resetAction}\" styleClass=\"ui-priority-primary\" style=\"width: 20%\" icon=\"ui-icon-disk\" />\n\t\t\t</div>\n\t\t</p:panel>\n\t</h:form>\n\t	<br/>\n\t<h:form id=\"RoomTypeListForm\">\n\t\t<p:growl id=\"growl\" life=\"10000\" />\n\t\t<input type=\"hidden\" name=\"${_csrf.parameterName}\" value=\"${_csrf.token}\" /> \n\t\t<p:dataTable var=\"roomType\" value=\"#{roomTypeController.lazyData}\" \n\t\t\tpaginator=\"true\" rows=\"10\" paginatorTemplate=\"{CurrentPageReport} {FirstPageLink} {PreviousPageLink} {PageLinks} {NextPageLink} {LastPageLink} {RowsPerPageDropdown}\" \n\t\t\trowsPerPageTemplate=\"10,20,30\" selectionMode=\"single\" \n\t\t\tselection=\"#{roomTypeController.selectedRoomTypeDTO}\"\n\t\t\tid=\"RoomTypeTable\" lazy=\"true\"\n\t\t\trowIndexVar=\"rowIndex\" widgetVar=\"dataTableWidget\">\n\t\t\t<p:ajax event=\"rowSelect\" listener=\"#{roomTypeController.onRowSelect}\"/>\n\t\t\t<p:column headerText=\"No\">\n\t\t\t\t#{(rowIndex + (roomTypeController.lazyData.pageSize ) * ( (dataTableWidget.paginator.page + 1) - 1)) + 1 }\n\t\t\t</p:column>\n\t\n\t\t\t<p:column headerText=\"Is Active\">\n\t\t\t\t<p:selectBooleanCheckbox value=\"#{roomType.isActive}\" disabled=\"true\"/>\n\t\t\t</p:column>\n\t\t\t<p:column headerText=\"Code\">\n\t\t\t\t<h:outputText value=\"#{roomType.code}\" />\n\t\t\t</p:column>\n\t\t\t<p:column headerText=\"Name\">\n\t\t\t\t<h:outputText value=\"#{roomType.name}\" />\n\t\t\t</p:column>\n\t\t\t<p:column headerText=\"Description\">\n\t\t\t\t<h:outputText value=\"#{roomType.description}\" />\n\t\t\t</p:column>\n\t\t\t<p:column style=\"width:32px;text-align: center\" headerText=\"View\">\n\t\t\t\t<p:commandButton update=\":centerContentPanel\"\n\t\t\t\t\tstyleClass=\"ui-priority-primary\" icon=\"ui-icon-search\" title=\"View\">\n\t\t\t\t\t<f:setPropertyActionListener value=\"#{roomType}\" target=\"#{roomTypeController.viewAction}\" />\n\t\t\t\t</p:commandButton>\n\t\t\t</p:column>\n\t\t\t<p:column style=\"width:32px;text-align: center\" headerText=\"Delete\">\n\t\t\t\t<p:commandButton update=\":centerContentPanel\" styleClass=\"ui-priority-primary\" icon=\"ui-icon-search\" title=\"Delete\">\n\t\t\t\t\t<p:confirm header=\"Confirmation\" message=\"Are you sure?\" icon=\"ui-icon-alert\" />\n\t\t\t\t\t<f:setPropertyActionListener value=\"#{roomType}\" target=\"#{roomTypeController.deleteAction}\" />\n\t\t\t\t</p:commandButton>\n\t\t\t</p:column>\n\t\t</p:dataTable>\n\t\t<p:confirmDialog global=\"true\" showEffect=\"fade\" hideEffect=\"fade\">\n\t\t\t<p:commandButton value=\"Yes\" type=\"button\" styleClass=\"ui-confirmdialog-yes\" icon=\"ui-icon-check\" />\n\t\t\t<p:commandButton value=\"No\" type=\"button\" styleClass=\"ui-confirmdialog-no\" icon=\"ui-icon-close\" />\n\t\t</p:confirmDialog>\n\t</h:form>\n\t</div>\n</ui:composition>";
//		String webView = "<ui:composition xmlns=\"http://www.w3.org/1999/xhtml\"\n xmlns:ui=\"http://java.sun.com/jsf/facelets\"\n xmlns:h=\"http://java.sun.com/jsf/html\"\n xmlns:f=\"http://java.sun.com/jsf/core\"\n xmlns:p=\"http://primefaces.org/ui\">\n\t<div class=\"ui-fluid\">\n\t<h:form id=\"RoomTypeViewForm\">\n\t\t<input type=\"hidden\" name=\"${_csrf.parameterName}\" value=\"${_csrf.token}\" />\n\t\t<p:panel header=\" Room Type\">\n\t\t\t<p:growl id=\"growl\" life=\"10000\" />\n\t\t\t<p:panelGrid columns=\"2\" columnClasses=\"ui-grid-col-3,ui-grid-col-10\" layout=\"grid\" styleClass=\"ui-panelgrid-blank\">\n\t\n\t\t\t\t<p:outputLabel value=\"Is Active: \" />\n\t\t\t\t<p:selectBooleanCheckbox value=\"#{roomTypeController.selectedRoomTypeDTO.isActive}\" disabled=\"true\"/>\n\t\t\t\t<p:outputLabel value=\"Code:\"/>\n\t\t\t\t<p:outputLabel value=\"#{roomTypeController.selectedRoomTypeDTO.code}\"/>\n\t\t\t\t<p:outputLabel value=\"Name:\"/>\n\t\t\t\t<p:outputLabel value=\"#{roomTypeController.selectedRoomTypeDTO.name}\"/>\n\t\t\t\t<p:outputLabel value=\"Description:\"/>\n\t\t\t\t<p:outputLabel value=\"#{roomTypeController.selectedRoomTypeDTO.description}\"/>\n\t\t\t</p:panelGrid>\n\t\t</p:panel>\n\t</h:form>\n\t</div>\n</ui:composition>";
		
		String absController = "/**\n *\n */\npackage com.sky.biz.sseries.apm.controller;\nimport java.util.*;\nimport javax.annotation.PostConstruct;\nimport javax.faces.bean.ManagedProperty;\nimport javax.faces.event.ActionEvent;\nimport com.sky.biz.sseries.mbean.AbstractController;\nimport com.sky.biz.sseries.mbean.IBasicController;\nimport com.sky.biz.sseries.mbean.LazyDataModelUtil;\nimport com.sky.biz.sseries.apm.dto.*;\nimport com.sky.biz.sseries.apm.services.*;\n\nimport com.sky.biz.sseries.util.JsfUtil;\n\nimport com.sky.biz.sseries.util.SpecificationsUtil;\nimport org.primefaces.event.SelectEvent;\npublic class AbstractRoomMeterController extends AbstractController implements IBasicController {\n\tprivate LazyDataModelUtil<RoomMeterDTO> lazyData;\n\t@ManagedProperty(value=\"#{roomMeterService}\")\n\tprivate IRoomMeterService roomMeterService;\n\tprivate RoomMeterDTO selectedRoomMeterDTO;\n\tprivate RoomMeterDTO mainRoomMeterDTO;\n\tprivate RoomMeterDTO criteriaRoomMeterDTO;\n\tprivate List<MeterTypeDTO> meterTypeList;\n\t\n\tprivate List<RoomDTO> roomList;\n\t@ManagedProperty(value=\"#{meterTypeService}\")\n\tprivate IMeterTypeService meterTypeService;\n\t@ManagedProperty(value=\"#{roomService}\")\n\tprivate IRoomService roomService;\n\n\t@SuppressWarnings(\"unchecked\")\n\t@PostConstruct\n\tpublic void init() {\n\t\tthis.createView=\"app/apm/master-data/room-meter-create\";\n\t\tthis.editView=\"app/apm/master-data/room-meter-edit\";\n\t\tthis.listView=\"app/apm/master-data/room-meter-list\";\n\t\tthis.readView=\"app/apm/master-data/room-meter-view\";\n\t\tthis.selectedRoomMeterDTO = new RoomMeterDTO();\n\t\tthis.criteriaRoomMeterDTO = new RoomMeterDTO();\n\t\tthis.mainRoomMeterDTO = new RoomMeterDTO();\n\t\tthis.currentSubView = this.listView;\n\t\tlazyData = new LazyDataModelUtil<RoomMeterDTO>(roomMeterService);\n\t\tthis.meterTypeList = this.meterTypeService.loadActiveMeterType();\n\t\n\t\tthis.roomList = this.roomService.loadActiveRoom();\n\t}\n\n\tpublic void editAction(ActionEvent actionEvent){\n\t\ttry{\n\t\t\tif(this.selectedRoomMeterDTO == null || this.selectedRoomMeterDTO.getId() == null){\n\t\t\t\tJsfUtil.addWarningMessage(\"Please select at least one item\");\n\t\t\t}else{\n\t\t\t\tthis.mainRoomMeterDTO = this.selectedRoomMeterDTO;\n\t\t\t\tthis.setCurrentSubView(this.editView);\n\t\t\t}\n\t\t}catch(Exception ex){\n\t\t\tJsfUtil.addErrorMessage(ex, \"SSeries Error Please Contact admin\");\n\t\t\tex.printStackTrace();\n\t\t}\n\t}\n\n\tpublic void viewAction(ActionEvent actionEvent){\n\t\ttry{\n\t\t\tif(this.selectedRoomMeterDTO == null || this.selectedRoomMeterDTO.getId() == null){\n\t\t\t\tJsfUtil.addWarningMessage(\"Please select at least one item\");\n\t\t\t}else{\n\t\t\t\tthis.setCurrentSubView(this.readView);\n\t\t\t}\n\t\t}catch(Exception ex){\n\t\t\tJsfUtil.addErrorMessage(ex, \"SSeries Error Please Contact admin\");\n\t\t\tex.printStackTrace();\n\t\t}\n\t}\n\n\tpublic void newAction(ActionEvent actionEvent) {\n\t\ttry{\n\t\t\tthis.mainRoomMeterDTO = new RoomMeterDTO();\n\t\t\tthis.setCurrentSubView(this.createView);\n\t\t}catch(Exception ex){\n\t\t\tJsfUtil.addErrorMessage(ex, \"SSeries Error Please Contact admin\");\n\t\t\tex.printStackTrace();\n\t\t}\n\t}\n\n\tpublic void saveAction(ActionEvent actionEvent) {\n\t\ttry{\n\t\t\troomMeterService.saveNew(this.mainRoomMeterDTO);\n\t\t\tthis.selectedRoomMeterDTO = this.mainRoomMeterDTO;\n\t\t\tthis.mainRoomMeterDTO = new RoomMeterDTO();\n\t\t\tthis.setCurrentSubView(this.readView);\n\t\t\tJsfUtil.addSuccessMessage(\" Room Meter was created already!!\");\n\t\t}catch(Exception ex){\n\t\t\tJsfUtil.addErrorMessage(ex, \"SSeries Error Please Contact admin\");\n\t\t\tex.printStackTrace();\n\t\t}\n\t}\n\n\tpublic void updateAction(ActionEvent actionEvent) {\n\t\ttry{\n\t\t\troomMeterService.update(this.mainRoomMeterDTO);\n\t\t\tthis.selectedRoomMeterDTO = this.mainRoomMeterDTO;\n\t\t\tthis.mainRoomMeterDTO = new RoomMeterDTO();\n\t\t\tthis.setCurrentSubView(this.readView);\n\t\t\tJsfUtil.addSuccessMessage(\" Room Meter was updated already!!\");\n\t\t}catch(Exception ex){\n\t\t\tJsfUtil.addErrorMessage(ex, \"SSeries Error Please Contact admin\");\n\t\t\tex.printStackTrace();\n\t\t}\n\t}\n\n\tpublic void deleteAction(ActionEvent actionEvent) {\n\t\ttry{\n\t\t\troomMeterService.delete(this.selectedRoomMeterDTO);\n\t\t\tthis.selectedRoomMeterDTO = this.mainRoomMeterDTO;\n\t\t\tthis.mainRoomMeterDTO = new RoomMeterDTO();\n\t\t\tthis.setCurrentSubView(this.listView);\n\t\t\tJsfUtil.addSuccessMessage(\" Room Meter was deleted already!!\");\n\t\t}catch(Exception ex){\n\t\t\tJsfUtil.addErrorMessage(ex, \"SSeries Error Please Contact admin\");\n\t\t\tex.printStackTrace();\n\t\t}\n\t}\n\n\tpublic void searchAction(ActionEvent actionEvent){\n\t\ttry{\n\t\t\tMap<String, Object> map = new HashMap<String, Object>();\n\t\t\tmap.put(SpecificationsUtil.DEFAULT_CRITERIA_KEY_MAP,this.criteriaRoomMeterDTO);\n\t\t\tthis.lazyData.setCriteriaMap(map);\n\t\t}catch(Exception ex){\n\t\t\tJsfUtil.addErrorMessage(ex, \"SSeries Error Please Contact admin\");\n\t\t\tex.printStackTrace();\n\t\t}\n\t}\n\n\tpublic void resetAction(ActionEvent actionEvent){\n\t\tthis.criteriaRoomMeterDTO = new RoomMeterDTO();\n\t\tthis.lazyData.setCriteriaMap(null);\n\n\t}\n\n\tpublic void setDeleteAction(RoomMeterDTO roomMeter){\n\t\ttry{\n\t\t\tthis.selectedRoomMeterDTO = roomMeter;\n\t\t\tif(this.selectedRoomMeterDTO == null || this.selectedRoomMeterDTO.getId() == null){\n\t\t\t\tJsfUtil.addWarningMessage(\"Please select at least one item\");\n\t\t\t}else{\n\t\t\t\troomMeterService.delete(this.selectedRoomMeterDTO);\n\t\t\t\tthis.selectedRoomMeterDTO = this.mainRoomMeterDTO;\n\t\t\t\tthis.mainRoomMeterDTO = new RoomMeterDTO();\n\t\t\t\tthis.setCurrentSubView(this.listView);\n\t\t\t\tJsfUtil.addSuccessMessage(\" Room Meter was deleted already!!\");\n\t\t\t}\n\t\t}catch(Exception ex){\n\t\t\tJsfUtil.addErrorMessage(ex, \"SSeries Error Please Contact admin\");\n\t\t\tex.printStackTrace();\n\t\t}\n\n\t}\n\n\tpublic void setViewAction(RoomMeterDTO roomMeter){\n\t\tthis.selectedRoomMeterDTO = roomMeter;\n\t\tthis.setCurrentSubView(this.readView);\n\n\t}\n\n\tpublic void onRowSelect(SelectEvent event) {\n\t\tthis.selectedRoomMeterDTO = (RoomMeterDTO) event.getObject();\n\t}\n\n\tpublic IRoomMeterService getRoomMeterService() {\n\t\t\treturn roomMeterService;\n\t}\n\n\tpublic void setRoomMeterService(IRoomMeterService roomMeterService) {\n\t\tthis.roomMeterService = roomMeterService;\n\n\t}\n\n\tpublic LazyDataModelUtil<RoomMeterDTO> getLazyData() {\n\t\treturn lazyData;\n\n\t}\n\n\tpublic void setLazyData(LazyDataModelUtil<RoomMeterDTO> lazyData) {\n\t\tthis.lazyData = lazyData;\n\n\t}\n\n\tpublic RoomMeterDTO getSelectedRoomMeterDTO() {\n\t\treturn selectedRoomMeterDTO;\n\n\t}\n\n\tpublic void setSelectedRoomMeterDTO(RoomMeterDTO selectedRoomMeterDTO) {\n\t\tthis.selectedRoomMeterDTO = selectedRoomMeterDTO;\n\n\t}\n\n\tpublic RoomMeterDTO getMainRoomMeterDTO() {\n\t\treturn mainRoomMeterDTO;\n\n\t}\n\n\tpublic void setMainRoomMeterDTO(RoomMeterDTO mainRoomMeterDTO) {\n\t\tthis.mainRoomMeterDTO = mainRoomMeterDTO;\n\n\t}\n\n\tpublic RoomMeterDTO getCriteriaRoomMeterDTO() {\n\t\treturn criteriaRoomMeterDTO;\n\n\t}\n\n\tpublic void setCriteriaRoomMeterDTO(RoomMeterDTO criteriaRoomMeterDTO) {\n\t\tthis.criteriaRoomMeterDTO = criteriaRoomMeterDTO;\n\n\t}\n\tpublic IMeterTypeService getMeterTypeService() {\n\t\treturn meterTypeService;\n\t}\n\tpublic void setMeterTypeService(IMeterTypeService meterTypeService) {\n\t\tthis.meterTypeService = meterTypeService;\n\t}\n\t\n\tpublic IRoomService getRoomService() {\n\t\treturn roomService;\n\t}\n\tpublic void setRoomService(IRoomService roomService) {\n\t\tthis.roomService = roomService;\n\t}\n\tpublic List<MeterTypeDTO> getMeterTypeList(){\n\t\treturn this.meterTypeList;\n\t}\n\tpublic void setMeterTypeList(List<MeterTypeDTO> meterTypeList) {\n\t\tthis.meterTypeList = meterTypeList;\n\t}\n\t\n\tpublic List<RoomDTO> getRoomList(){\n\t\treturn this.roomList;\n\t}\n\tpublic void setRoomList(List<RoomDTO> roomList) {\n\t\tthis.roomList = roomList;\n\t}\n}";
		
		bufferedWrite(absController,CONTROLLERPATH);
//		bufferedWrite(converter,CONVERTERPATH);
//		bufferedWrite(serviceInterface,INTERFACESERVICEPATH);
//		bufferedWrite(service,SERVICEPATH);
//		bufferedWrite(dto,DTOPATH);
//		bufferedWrite(entity,ENTITYPATH);
//		bufferedWrite(repository,REPOSITORYPATH);
//		bufferedWrite(specification,SPECIFICATIONPATH);
		
//		bufferedWrite(webCenter,SCREENCENTERPATH);
//		bufferedWrite(webList,SCREENLISTPATH);
//		bufferedWrite(webCreate,SCREENCREATEPATH);
//		bufferedWrite(webEdit,SCREENMODIFYPATH);
//		bufferedWrite(webView,SCREENVIEWPATH);
//		

		//bufferedWrite(list, FILEPATH,FILENAME);
		//bufferedWrite(list, CONTROLLERFILEPATH,FILENAME);
	}

	/**
	 * Write a small string to a File - Use a FileWriter
	 */
	public static void simpleWrite(String content, String filePath) {
		Path fileP = Paths.get(filePath);
		try {
			if(!Files.exists(fileP.getFileName()))
				Files.createFile(fileP.getFileName());
			Files.write(fileP, content.getBytes("utf-8"));

		} catch (UnsupportedEncodingException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		}
	}

	/**
	 * Write a big list of Strings to a file - Use a BufferedWriter
	 */
	public static void bufferedWrite(List<String> content, String filePath,String fileName) {

		File file = new File(filePath);
		if(!file.exists()){
			file.getParentFile().mkdirs();
		}
		
		Path fileP = Paths.get(filePath);
		Charset charset = Charset.forName("utf-8");
		
		try (BufferedWriter writer = Files.newBufferedWriter(fileP, charset)) {
			
			for (String line : content) {
				writer.write(line, 0, line.length());
				writer.newLine();
			}

		} catch (IOException e) {
			e.printStackTrace();
		}
	}
	
	public static void bufferedWrite(String content,String filePath){
		File file = new File(filePath);
		if(!file.exists()){
			file.getParentFile().mkdirs();
		}
		
		Path fileP = Paths.get(filePath);
		Charset charset = Charset.forName("utf-8");
		
		try (BufferedWriter writer = Files.newBufferedWriter(fileP, charset)) {			
			writer.write(content,0,content.length());
			writer.newLine();			

		} catch (IOException e) {
			e.printStackTrace();
		}
		
	}
	

	/**
	 * Write raw data to file - use OutputStream
	 */
	public static void writeWithOutputStream(String content, String filePath) {

		Path fileP = Paths.get(filePath);

		try (OutputStream outputStream = Files.newOutputStream(fileP)) {
			if(!Files.exists(fileP))
				Files.createFile(fileP);
			outputStream.write(content.getBytes());

		} catch (IOException e) {
			e.printStackTrace();
		}
	}

	/**
	 * Write raw data to file using BufferedOutputStream
	 */
	public static void writeWithBufferedOutputStream(List<String> content, String filePath) {

		Path fileP = Paths.get(filePath);

		try (BufferedOutputStream outputStream = new BufferedOutputStream(Files.newOutputStream(fileP))) {
			if(!Files.exists(fileP))
				Files.createFile(fileP);
			for (String line : content) {
				outputStream.write(line.getBytes());
			}

		} catch (IOException e) {
			e.printStackTrace();
		}
	}

	/**
	 * Write a string list to a File
	 */
	public static void simpleWriteListOfString(List<String> content, String filePath) {
		Path fileP = Paths.get(filePath);
		Charset charset = Charset.forName("utf-8");

		try {
			if(!Files.exists(fileP))
				Files.createFile(fileP);
			Files.write(fileP, content, charset);

		} catch (UnsupportedEncodingException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		}
	}
}
